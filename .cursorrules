
You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI and Tailwind, clerk, stripe,TanStack Query,TanStack Table, Drizzle, supabase, storybook v8

- Web Components - for embeddable widgets
- Authentication with Clerk
- Database Functions, Queries, Mutations and Hosting
- Creating and Generating Types with TypeScript - to ensure a type-safe application
- Injecting embeddable into other apps
- NextJS Navigation & Layouts
- Mobile Responsiveness
- Creating Tables, Pagination, Filtering
- Integrating Payment System

# Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.
- Not use forEarch, for of loop, Use `map`, filter, find, reduce, etc.

# comments
- Add a comment at the beginning of the code. The format is as follows
  - JavaScript: “JSDoc”
  - Use @file instead of @fileoverview
- Within the comment, please provide an overview of the script, its main specifications, and any limitations.
- コメント内では、スクリプトの概要、主な仕様、制限事項を小学生でもわかるように記載してください。
- 複雑な処理があった場合は、処理の流れがわかるように記載
  - 重複する説明内容は可能な限り避ける
  -  @returns {JSX.Element}を記載しない

# Naming Conventions
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.

# TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.

# Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.

# UI and Styling
- Use Shadcn UI, Radix, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.

# Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.

# Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client':
  - Favor server components and Next.js SSR.
  - Use only for Web API access in small components.
  - Avoid for data fetching or state management.

instructions:
# SaaS Application Development Guidelines
- Use Next.js for the dashboard and widget implementation in a unified repository.
- Utilize Supabase for database and storage management, not for authentication.
- Create Web Components for the embeddable widget using class-based approach and Shadow DOM.
- Implement Server Components and Server Actions in Next.js for improved performance.
- Use Shadcn UI, Radix UI, and Tailwind CSS for building the user interface.
- Implement data fetching and table management using TanStack Query and TanStack Table.
- Ensure proper error handling on both client and server sides, providing user-friendly messages.
- Implement internationalization (i18n) support, at minimum for English and Japanese.
- Implement a project management system allowing users to create, view, and manage multiple projects.
- Generate unique widget codes for each project, enabling easy embedding on external sites.
- Use environment variables for managing sensitive information and API keys.
- Implement proper security measures including input sanitization and Content Security Policy (CSP).
- Ensure responsive design for both dashboard and widget components.
- Write comprehensive unit and integration tests, including tests for authentication flows.
- Use modular architecture to ensure scalability and maintainability of the codebase.
- Regularly review and update these guidelines as the project evolves.

Follow Next.js docs for Data Fetching, Rendering, and Routing.
